<?php

namespace App\Http\Controllers;

use App\Models\Billing;
use App\Models\Project;
use App\Models\Invoice;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;

class BillingController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        // Eager load the related project
        $billings = Billing::with('project.quotation')->latest()->get();
        return view('billings.index', compact('billings'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(Request $request)
    {
        $project = Project::findOrFail($request->query('project_id'));
        return view('billings.create', compact('project'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // 1. Validate the incoming data
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'billing_date' => 'required|date',
            'amount' => 'required|numeric|min:0.01',
            'notes' => 'nullable|string',
        ]);

        // 2. Create the Billing record
        // The 'billing_no' will be auto-generated by the model's boot method
        // The 'status' defaults to 'pending' as defined in the migration
        Billing::create($validated);

        // 3. Redirect back to the Project dashboard
        // We get the project_id from the validated data
        return redirect()->route('projects.show', $validated['project_id'])
                         ->with('success', 'Billing request created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Billing $billing)
    {
        // Eager load the related project
        $billing->load('project');
        return view('billings.show', compact('billing'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Billing $billing)
    {
        if ($billing->status !== 'pending') {
            return redirect()->route('billings.show', $billing)->with('error', 'Only pending billings can be edited.');
        }

        // We don't need project data here, just the billing itself
        return view('billings.edit', compact('billing'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Billing $billing)
    {
        // Ensure only pending billings can be updated
        if ($billing->status !== 'pending') {
            return redirect()->route('billings.show', $billing)->with('error', 'Only pending billings can be updated.');
        }

        // Validate the incoming data
        $validated = $request->validate([
            'billing_date' => 'required|date',
            'amount' => 'required|numeric|min:0.01',
            'notes' => 'nullable|string',
            // We don't allow changing the project_id
        ]);

        // Update the Billing record
        $billing->update($validated);

        // Redirect back to the "Show" page for this billing
        return redirect()->route('billings.show', $billing)
                        ->with('success', 'Billing request updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Billing $billing)
    {
        //
    }

    /**
     * Update the status of the specified billing request.
     */
    public function updateStatus(Request $request, Billing $billing)
    {
        $validated = $request->validate([
            'status' => [
                'required',
                Rule::in(['approved', 'rejected', 'pending']),
            ],
        ]);

        $newStatus = $validated['status'];
        $message = 'Billing status updated successfully.';

        // Prevent changing status if already invoiced (unless reopening)
        if ($billing->status === 'invoiced' && $newStatus !== 'pending') {
            return back()->with('error', 'Cannot change status of an invoiced billing.');
        }

        try {
            DB::beginTransaction();

            // --- CORE LOGIC CHANGE ---
            if ($newStatus == 'approved') {
                // Check if an invoice already exists for this billing
                if (!$billing->invoice) {
                    // Create the Invoice
                    Invoice::create([
                        'billing_id' => $billing->id,
                        'client_id' => $billing->project->client_id, // Get client from project
                        'amount' => $billing->amount,
                        // Assuming 0 tax for now, calculate total
                        'tax_amount' => 0,
                        'total_amount' => $billing->amount,
                        'issued_date' => now()->toDateString(), // Use today's date
                        'due_date' => now()->addDays(30)->toDateString(), // Example: Due in 30 days
                        'status' => 'draft', // New invoice starts as draft
                    ]);

                    // Update Billing status to 'invoiced' SINCE invoice is now created
                    $billing->status = 'invoiced';
                    $message = 'Billing approved and Invoice created successfully.';
                } else {
                    // If invoice already exists, just mark billing as approved (or invoiced)
                    $billing->status = 'invoiced'; // Or keep as 'approved' if you prefer that flow
                    $message = 'Billing approved (Invoice already exists).';
                }

            } else {
                // For 'rejected' or 'pending', just update the status
                $billing->status = $newStatus;
            }
            // --- END CORE LOGIC CHANGE ---

            $billing->save();

            DB::commit();

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withErrors('Error updating status: ' . $e->getMessage());
        }

        return redirect()->route('billings.show', $billing)->with('success', $message);
    }
}
